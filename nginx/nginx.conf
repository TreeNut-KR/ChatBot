http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    client_max_body_size 10M;
    log_format detailed_log '$remote_addr - $remote_user [$time_local] '
                            '"$request" $status $body_bytes_sent '
                            '"$http_referer" "$http_user_agent" '
                            'request_body="$request_body" '
                            'upstream_response_time="$upstream_response_time" '
                            'upstream_status="$upstream_status"';

    server {
        listen 443 ssl;
        server_name treenut.ddns.net;

        # SSL 설정
        ssl_certificate /etc/nginx/certs/treenut.ddns.net_2025040424819.crt.pem;
        ssl_certificate_key /etc/nginx/certs/treenut.ddns.net_2025040424819.key.pem;
        ssl_trusted_certificate /etc/nginx/certs/treenut.ddns.net_2025040424819.all.crt.pem;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 5m;
        ssl_session_tickets off;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # 기본 설정
        root /usr/share/nginx/html;
        index index.html index.htm;

        # 타임아웃 설정
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
        send_timeout 600s;

        # 정적 파일 처리
        location /static/ {
            root /usr/share/nginx/html;
            expires 7d;
            add_header Cache-Control "public, max-age=604800";
            access_log off;
            try_files $uri =404;
        }

        location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
            root /usr/share/nginx/html;
            try_files $uri =404;
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
            access_log off;
        }

        # React 앱 처리
        location / {
            try_files $uri $uri/ /index.html;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            error_log /var/log/nginx/react_error.log debug;
            access_log /var/log/nginx/react_access.log detailed_log;
        }

        # FastAPI 처리
        location /sub/ {
            proxy_pass http://fastapi:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            error_log /var/log/nginx/fastapi_error.log debug;
            access_log /var/log/nginx/fastapi_access.log detailed_log;
        }

        # Spring Boot 기본 처리
        location /server {
            proxy_pass http://springboot:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            error_log /var/log/nginx/server_error.log debug;
            access_log /var/log/nginx/server_access.log detailed_log;
        }

        # 구글 로그인 처리
        location /server/user/social/google/login {
            proxy_pass http://springboot:8080;
            
            # 기본적인 프록시 헤더만 설정
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 모든 CORS 요청 허용 (가장 기본적인 설정만)
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' '*' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
        }

        # 구글 OAuth 콜백 처리
        location /server/oauth/callback/google {
            proxy_pass http://springboot:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            
            add_header 'Cross-Origin-Opener-Policy' 'same-origin-allow-popups' always;
            add_header 'Cross-Origin-Embedder-Policy' 'require-corp' always;
        }

        # 카카오 로그인 처리
        location /server/user/social/kakao/login {
            proxy_pass http://springboot:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
        }

        # 카카오 OAuth 콜백 처리
        location /server/oauth/callback/kakao {
            proxy_pass http://springboot:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
        }

        # 네이버 로그인 처리
        location /server/user/social/naver/login {
            proxy_pass http://springboot:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
        }

        # 네이버 OAuth 콜백 처리 (필요시)
        location /server/user/social/naver/redirect {
            proxy_pass http://springboot:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
        }
    }
}

events {
    worker_connections 1024;
}